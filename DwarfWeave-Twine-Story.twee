:: StoryTitle
DwarfWeave


:: StoryData
{
  "ifid": "143BEA13-586D-4287-B62B-269DDC4CE6DB",
  "format": "SugarCube",
  "format-version": "2.37.3",
  "start": "Start",
  "zoom": 1
}


:: Start {"position":"250,350","size":"100,100"}
<style>
body {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 20px;
    min-height: 100vh;
}

.start-container {
    max-width: 600px;
    margin: 50px auto;
    text-align: center;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-radius: 20px;
    padding: 40px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
}

.logo {
    font-size: 3em;
    margin-bottom: 10px;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
}

.subtitle {
    font-size: 1.3em;
    margin-bottom: 40px;
    opacity: 0.9;
    line-height: 1.4;
}

.menu-options {
    display: flex;
    flex-direction: column;
    gap: 20px;
    margin-top: 30px;
}

.menu-btn {
    display: block;
    text-decoration: none;
    color: white;
    background: linear-gradient(45deg, #ff6b6b, #feca57);
    padding: 20px 30px;
    border-radius: 15px;
    font-size: 1.2em;
    font-weight: bold;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    text-transform: uppercase;
    letter-spacing: 1px;
    cursor: pointer;
    border: none;
    width: 100%;
}

.menu-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 25px rgba(0, 0, 0, 0.3);
}

.menu-btn.secondary {
    background: linear-gradient(45deg, #667eea, #764ba2);
}

.features {
    margin-top: 30px;
    padding-top: 20px;
    border-top: 1px solid rgba(255, 255, 255, 0.2);
}

.feature-list {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 15px;
    margin-top: 20px;
}

.feature-item {
    background: rgba(255, 255, 255, 0.1);
    padding: 15px;
    border-radius: 10px;
    font-size: 0.9em;
}

@media (max-width: 600px) {
    .start-container {
        margin: 20px auto;
        padding: 30px 20px;
    }
    
    .logo {
        font-size: 2.5em;
    }
    
    .menu-btn {
        padding: 15px 20px;
        font-size: 1.1em;
    }
}
</style>

<div class="start-container">
    <div class="logo">üåå DwarfWeave</div>
    <div class="subtitle">
        Create infinite interactive fiction worlds with AI<br>
        <em>Where every story is uniquely yours</em>
    </div>
    
    <div class="menu-options">
        <span class="menu-btn" onclick="document.querySelector('a[data-passage=WorldBuilder]').click()">
            üöÄ Build a New World
        </span>
        <span class="menu-btn secondary" onclick="document.querySelector('a[data-passage=Game]').click()">
            üéÆ Play Existing World
        </span>
    </div>
    
    <!-- Backup Twine links for navigation (hidden but functional) -->
    <div style="display: none;">
        [[Build a New World->WorldBuilder]]
        [[Play Existing World->Game]]
    </div>
    
    <div class="features">
        <h3 style="margin-bottom: 15px; color: #feca57;">‚ú® What You Can Create</h3>
        <div class="feature-list">
            <div class="feature-item">üêã Space Whales<br><small>Cosmic adventures</small></div>
            <div class="feature-item">ü§ñ Cyberpunk Dwarves<br><small>Tech & tradition</small></div>
            <div class="feature-item">üèùÔ∏è Floating Islands<br><small>Sky adventures</small></div>
            <div class="feature-item">üåä Underwater Cities<br><small>Deep sea mysteries</small></div>
            <div class="feature-item">‚è∞ Time Loops<br><small>Temporal puzzles</small></div>
            <div class="feature-item">üéµ Musical Magic<br><small>Harmonic spells</small></div>
        </div>
    </div>
</div>

<script>
// SugarCube-optimized navigation functions
function goToPassage(passageName) {
    if (typeof Engine !== 'undefined' && Engine.play) {
        Engine.play(passageName);
    } else {
        console.error('SugarCube Engine not available');
    }
}

function restartStory() {
    if (typeof Engine !== 'undefined' && Engine.restart) {
        Engine.restart();
    } else {
        window.location.reload();
    }
}
</script>

:: WorldBuilder {"position":"425,200","size":"100,100"}
<style>
body {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.world-builder {
    max-width: 600px;
    margin: 20px auto;
    padding: 30px;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-radius: 20px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
}

.form-group {
    margin-bottom: 20px;
}

label {
    display: block;
    margin-bottom: 8px;
    font-weight: bold;
    font-size: 1.1em;
}

input, textarea, select {
    width: 100%;
    padding: 12px;
    border: none;
    border-radius: 10px;
    font-size: 16px;
    background: rgba(255, 255, 255, 0.9);
    color: #333;
    box-sizing: border-box;
}

input:focus, textarea:focus, select:focus {
    background: rgba(255, 255, 255, 0.95);
    color: #222;
    outline: 2px solid #feca57;
    box-shadow: 0 0 0 3px rgba(254, 202, 87, 0.3);
}

input:hover, textarea:hover, select:hover {
    background: rgba(255, 255, 255, 0.95);
    color: #222;
}

textarea {
    height: 100px;
    resize: vertical;
    font-family: inherit;
}

.generate-btn {
    background: linear-gradient(45deg, #ff6b6b, #feca57);
    color: white;
    border: none;
    padding: 15px 30px;
    font-size: 1.2em;
    font-weight: bold;
    border-radius: 25px;
    cursor: pointer;
    width: 100%;
    margin-top: 20px;
}

.example-btn {
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: white;
    padding: 8px 15px;
    border-radius: 20px;
    cursor: pointer;
    margin: 5px;
    font-size: 0.9em;
}

.status {
    margin-top: 20px;
    padding: 15px;
    border-radius: 10px;
    text-align: center;
    font-weight: bold;
    display: none;
}

.status.loading {
    background: rgba(52, 152, 219, 0.2);
    border: 2px solid #3498db;
}

.status.success {
    background: rgba(46, 204, 113, 0.2);
    border: 2px solid #2ecc71;
}

.status.error {
    background: rgba(231, 76, 60, 0.2);
    border: 2px solid #e74c3c;
}
</style>

<div class="world-builder">
    <h2>üåç Create Your World</h2>
    
    <div class="form-group">
        <label for="description">Describe Your World:</label>
        <textarea id="description" placeholder="Paint a vivid picture of your story world..."></textarea>
    </div>
    
    <div class="form-group">
        <label for="theme">Theme/Genre:</label>
        <input type="text" id="theme" placeholder="e.g., space whales, cyberpunk dwarves">
    </div>
    
    <div class="form-group">
        <label for="tone">Story Tone:</label>
        <select id="tone">
            <option value="adventure">Adventure</option>
            <option value="wonder">Wonder & Awe</option>
            <option value="mystery">Mystery</option>
            <option value="gritty cyberpunk">Gritty Cyberpunk</option>
            <option value="epic fantasy">Epic Fantasy</option>
        </select>
    </div>
    
    <div style="margin-bottom: 20px;">
        <strong>Quick Examples:</strong><br>
        <button class="example-btn" onclick="loadSpaceWhales()">üêã Space Whales</button>
        <button class="example-btn" onclick="loadCyberpunkDwarves()">ü§ñ Cyberpunk Dwarves</button>
        <button class="example-btn" onclick="loadFloatingIslands()">üèùÔ∏è Floating Islands</button>
    </div>
    
    <button class="generate-btn" onclick="generateWorld()">üöÄ Generate My World</button>
    
    <div id="status" class="status"></div>
</div>

<!-- Hidden navigation links -->
<div style="display: none;">
    [[Go to Game->Game]]
    [[Go to Start->Start]]
</div>

<script>
function loadSpaceWhales() {
    document.getElementById('description').value = "A vast cosmos where ancient space whales swim through stellar currents, carrying entire civilizations on their backs. These magnificent creatures navigate between stars using quantum resonance.";
    document.getElementById('theme').value = "cosmic space whales";
    document.getElementById('tone').value = "wonder";
}

function loadCyberpunkDwarves() {
    document.getElementById('description').value = "Deep beneath neon-lit surface cities, cyberpunk dwarves operate quantum techno-forges. They weave digital spells through neural interfaces while maintaining ancient clan traditions.";
    document.getElementById('theme').value = "cyberpunk quantum technoweaving dwarves";
    document.getElementById('tone').value = "gritty cyberpunk";
}

function loadFloatingIslands() {
    document.getElementById('description').value = "Massive islands float through endless skies, held aloft by crystalline cores that hum with ancient magic. Sky pirates sail between them on wind-powered ships.";
    document.getElementById('theme').value = "floating sky islands";
    document.getElementById('tone').value = "adventure";
}

async function generateWorld() {
    const btn = document.querySelector('.generate-btn');
    const status = document.getElementById('status');
    
    const description = document.getElementById('description').value;
    const theme = document.getElementById('theme').value;
    const tone = document.getElementById('tone').value;
    
    if (!description || !theme) {
        alert('Please fill in the world description and theme!');
        return;
    }
    
    btn.disabled = true;
    btn.innerHTML = 'üåü Generating...';
    status.className = 'status loading';
    status.style.display = 'block';
    status.innerHTML = '‚ú® Creating your world...';
    
    try {
        const response = await fetch('http://localhost:8000/author/generate-world', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                description: description,
                theme: theme,
                player_role: "adventurer",
                key_elements: [],
                tone: tone,
                storylet_count: 15
            })
        });
        
        const result = await response.json();
        
        if (response.ok) {
            status.className = 'status success';
            status.innerHTML = `
                üéâ Success! Generated ${result.storylets_created} storylets!<br><br>
                <button onclick="document.querySelector('a[data-passage=Game]').click()" style="
                    background: linear-gradient(45deg, #2ecc71, #27ae60);
                    color: white;
                    border: none;
                    padding: 12px 24px;
                    font-size: 1.1em;
                    font-weight: bold;
                    border-radius: 10px;
                    cursor: pointer;
                    margin-top: 10px;
                ">üéÆ Start Playing Now!</button>
            `;
        } else {
            throw new Error(result.detail || 'Generation failed');
        }
        
    } catch (error) {
        status.className = 'status error';
        status.innerHTML = `‚ùå Error: ${error.message}<br><small>Make sure your backend server is running!</small>`;
    } finally {
        btn.disabled = false;
        btn.innerHTML = 'üöÄ Generate My World';
    }
}
</script>

:: Game {"position":"600,350","size":"100,100"}
<style>
body {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 20px;
    min-height: 100vh;
}

.game-container {
    max-width: 700px;
    margin: 0 auto;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-radius: 20px;
    padding: 30px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
}

.game-title {
    text-align: center;
    font-size: 2.5em;
    margin-bottom: 30px;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
}

#game-content {
    line-height: 1.6;
    font-size: 1.1em;
}

.choice-btn {
    display: block;
    width: 100%;
    margin: 10px 0;
    padding: 15px 20px;
    background: linear-gradient(45deg, #667eea, #764ba2);
    color: white;
    border: none;
    border-radius: 10px;
    font-size: 1.1em;
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: left;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
}

.choice-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
    background: linear-gradient(45deg, #5a67d8, #6b46c1);
}

.nav-links {
    text-align: center;
    margin-top: 30px;
    padding-top: 20px;
    border-top: 1px solid rgba(255, 255, 255, 0.2);
}

.nav-btn {
    display: inline-block;
    margin: 0 10px;
    padding: 10px 20px;
    background: rgba(255, 255, 255, 0.2);
    color: white;
    text-decoration: none;
    border-radius: 10px;
    font-weight: bold;
    transition: all 0.2s ease;
    cursor: pointer;
}

.nav-btn:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-1px);
}
</style>

<div class="game-container">
    <h1 class="game-title">üéÆ Your Adventure</h1>
    
    <div id="game-content">
        <p>Loading your story...</p>
    </div>
    
    <div class="nav-links">
        <span class="nav-btn" onclick="document.querySelector('a[data-passage=WorldBuilder]').click()">üåç Build New World</span>
        <span class="nav-btn" onclick="location.reload()">üîÑ Restart</span>
        <span class="nav-btn" onclick="document.querySelector('a[data-passage=Start]').click()">üè† Home</span>
    </div>
</div>

<script>
// This connects to your existing game logic
(function() {
    // Start a new game session
    const sessionId = 'twine-session-' + Math.random().toString(36).substr(2, 9);
    
    async function loadStorylet() {
        try {
            const response = await fetch('http://localhost:8000/api/next', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    session_id: sessionId,
                    vars: {
                        location: "start",
                        player_role: "adventurer"
                    }
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const story = await response.json();
            
            if (story.text) {
                let html = `<p>${story.text}</p>`;
                
                if (story.choices && story.choices.length > 0) {
                    html += '<div style="margin-top: 25px;">';
                    story.choices.forEach((choice, index) => {
                        html += `<button onclick="makeChoice(${index})" class="choice-btn">${choice.label}</button>`;
                    });
                    html += '</div>';
                }
                
                document.getElementById('game-content').innerHTML = html;
                
                // Store choices for later use
                window.currentChoices = story.choices;
                window.currentVars = story.vars;
            } else {
                document.getElementById('game-content').innerHTML = '<p>No storylets found. Please generate a world first!</p><br><span class="nav-btn" onclick="document.querySelector(\'a[data-passage=WorldBuilder]\').click()">Build a World</span>';
            }
            
        } catch (error) {
            console.error('Game loading error:', error);
            document.getElementById('game-content').innerHTML = `<p>Error loading story: ${error.message}</p><br><span class="nav-btn" onclick="document.querySelector('a[data-passage=WorldBuilder]').click()">Build a World</span>`;
        }
    }
    
    window.makeChoice = async function(choiceIndex) {
        const choice = window.currentChoices[choiceIndex];
        const newVars = { ...window.currentVars, ...choice.set };
        
        try {
            const response = await fetch('http://localhost:8000/api/next', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    session_id: sessionId,
                    vars: newVars
                })
            });
            
            const story = await response.json();
            
            if (story.text) {
                let html = `<p>${story.text}</p>`;
                
                if (story.choices && story.choices.length > 0) {
                    html += '<div style="margin-top: 25px;">';
                    story.choices.forEach((choice, index) => {
                        html += `<button onclick="makeChoice(${index})" class="choice-btn">${choice.label}</button>`;
                    });
                    html += '</div>';
                }
                
                document.getElementById('game-content').innerHTML = html;
                window.currentChoices = story.choices;
                window.currentVars = story.vars;
            } else {
                document.getElementById('game-content').innerHTML = '<p>The story continues...</p><br><span class="nav-btn" onclick="document.querySelector(\'a[data-passage=WorldBuilder]\').click()">Build a New World</span> | <span class="nav-btn" onclick="document.querySelector(\'a[data-passage=Game]\').click()">Restart</span>';
            }
            
        } catch (error) {
            console.error('Choice error:', error);
            document.getElementById('game-content').innerHTML = `<p>Error continuing story: ${error.message}</p><br><span class="nav-btn" onclick="document.querySelector('a[data-passage=Game]').click()">Try Again</span>`;
        }
    };
    
    // Load the first storylet
    loadStorylet();
})();
</script>

<!-- Hidden navigation links -->
<div style="display: none;">
    [[Go to WorldBuilder->WorldBuilder]]
    [[Go to Start->Start]]
</div>

:: StoryScript [script]
// Global SugarCube functions available to all passages
window.goToPassage = function(passageName) {
    Engine.play(passageName);
};

window.restartStory = function() {
    Engine.restart();
};
