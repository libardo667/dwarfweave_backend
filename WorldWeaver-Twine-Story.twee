:: StoryTitle
WorldWeaver


:: StoryData
{
  "ifid": "143BEA13-586D-4287-B62B-269DDC4CE6DB",
  "format": "SugarCube",
  "format-version": "2.37.3",
  "start": "Start",
  "zoom": 1
}


:: Start {"position":"250,350","size":"100,100"}
<style>
body {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 20px;
    min-height: 100vh;
}

.start-container {
    max-width: 600px;
    margin: 50px auto;
    text-align: center;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-radius: 20px;
    padding: 40px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
}

.logo {
    font-size: 3em;
    margin-bottom: 10px;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
}

.subtitle {
    font-size: 1.3em;
    margin-bottom: 40px;
    opacity: 0.9;
    line-height: 1.4;
}

.menu-options {
    display: flex;
    flex-direction: column;
    gap: 20px;
    margin: 30px auto;
    align-items: center;
    max-width: 400px;
}

.menu-btn {
    display: block;
    text-decoration: none;
    color: white;
    background: linear-gradient(45deg, #ff6b6b, #feca57);
    padding: 20px 30px;
    border-radius: 15px;
    font-size: 1.2em;
    font-weight: bold;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    text-transform: uppercase;
    letter-spacing: 1px;
    cursor: pointer;
    border: none;
    width: 100%;
}

.menu-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 25px rgba(0, 0, 0, 0.3);
}

.menu-btn.secondary {
    background: linear-gradient(45deg, #667eea, #764ba2);
}

.features {
    margin-top: 30px;
    padding-top: 20px;
    border-top: 1px solid rgba(255, 255, 255, 0.2);
}

.feature-list {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 15px;
    margin-top: 20px;
}

.feature-item {
    background: rgba(255, 255, 255, 0.1);
    padding: 15px;
    border-radius: 10px;
    font-size: 0.9em;
}

@media (max-width: 600px) {
    .start-container {
        margin: 20px auto;
        padding: 30px 20px;
    }
    
    .logo {
        font-size: 2.5em;
    }
    
    .menu-btn {
        padding: 15px 20px;
        font-size: 1.1em;
    }
}
</style>

<div class="start-container">
    <div class="logo">üåå WorldWeaver</div>
    <div class="subtitle">
        Weave infinite realities across the cosmic tapestry<br>
        <em>Where every thread creates new possibilities</em>
    </div>
    
    <div class="menu-options">
        <span class="menu-btn" onclick="document.querySelector('a[data-passage=WorldBuilder]').click()">
            ‚ú® Weave a New Reality
        </span>
        <span class="menu-btn secondary" onclick="document.querySelector('a[data-passage=Game]').click()">
            üåå Enter Existing Reality
        </span>
    </div>
    
    <!-- Backup Twine links for navigation (hidden but functional) -->
    <div style="display: none;">
        [[Weave a New Reality->WorldBuilder]]
        [[Enter Existing Reality->Game]]
    </div>
    
    <div class="features">
        <h3 style="margin-bottom: 15px; color: #feca57;">‚ú® Realities You Can Weave</h3>
        <div class="feature-list">
            <div class="feature-item">üåå Cosmic Storms<br><small>Reality-bending tempests</small></div>
            <div class="feature-item">üîÆ Quantum Echoes<br><small>Time-space mysteries</small></div>
            <div class="feature-item">üèùÔ∏è Floating Realms<br><small>Gravity-defying worlds</small></div>
            <div class="feature-item">üåä Dimensional Tides<br><small>Reality fluid landscapes</small></div>
            <div class="feature-item">‚ö° Stellar Currents<br><small>Energy-based civilizations</small></div>
            <div class="feature-item">üéµ Harmonic Spheres<br><small>Music-based magic</small></div>
        </div>
    </div>
</div>

<script>
// SugarCube-optimized navigation functions
function goToPassage(passageName) {
    if (typeof Engine !== 'undefined' && Engine.play) {
        Engine.play(passageName);
    } else {
        console.error('SugarCube Engine not available');
    }
}

function restartStory() {
    if (typeof Engine !== 'undefined' && Engine.restart) {
        Engine.restart();
    } else {
        window.location.reload();
    }
}
</script>

:: WorldBuilder {"position":"425,200","size":"100,100"}
<style>
body {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.world-builder {
    max-width: 600px;
    margin: 20px auto;
    padding: 30px;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-radius: 20px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
}

.form-group {
    margin-bottom: 20px;
}

label {
    display: block;
    margin-bottom: 8px;
    font-weight: bold;
    font-size: 1.1em;
}

input, textarea, select {
    width: 100%;
    padding: 12px;
    border: none;
    border-radius: 10px;
    font-size: 16px;
    background: rgba(255, 255, 255, 0.9);
    color: #333;
    box-sizing: border-box;
}

input:focus, textarea:focus, select:focus {
    background: rgba(255, 255, 255, 0.95);
    color: #222;
    outline: 2px solid #feca57;
    box-shadow: 0 0 0 3px rgba(254, 202, 87, 0.3);
}

input:hover, textarea:hover, select:hover {
    background: rgba(255, 255, 255, 0.95);
    color: #222;
}

textarea {
    height: 100px;
    resize: vertical;
    font-family: inherit;
}

.generate-btn {
    background: linear-gradient(45deg, #ff6b6b, #feca57);
    color: white;
    border: none;
    padding: 15px 30px;
    font-size: 1.2em;
    font-weight: bold;
    border-radius: 25px;
    cursor: pointer;
    width: 100%;
    margin-top: 20px;
}

.example-btn {
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: white;
    padding: 8px 15px;
    border-radius: 20px;
    cursor: pointer;
    margin: 5px;
    font-size: 0.9em;
}

.status {
    margin-top: 20px;
    padding: 15px;
    border-radius: 10px;
    text-align: center;
    font-weight: bold;
    display: none;
}

.status.loading {
    background: rgba(52, 152, 219, 0.2);
    border: 2px solid #3498db;
}

.status.success {
    background: rgba(46, 204, 113, 0.2);
    border: 2px solid #2ecc71;
}

.status.error {
    background: rgba(231, 76, 60, 0.2);
    border: 2px solid #e74c3c;
}
</style>

<div class="world-builder">
    <h2>üåå Weave Your Reality</h2>
    
    <div class="form-group">
        <label for="description">Describe Your Reality:</label>
        <textarea id="description" placeholder="Paint a vivid picture of your reality's essence..."></textarea>
    </div>
    
    <div class="form-group">
        <label for="theme">Reality Resonance:</label>
        <input type="text" id="theme" placeholder="e.g., stellar currents, quantum echoes, cosmic storms">
    </div>
    
    <div class="form-group">
        <label for="tone">Narrative Frequency:</label>
        <select id="tone">
            <option value="adventure">Adventure</option>
            <option value="wonder">Wonder & Awe</option>
            <option value="mystery">Cosmic Mystery</option>
            <option value="transcendent">Transcendent</option>
            <option value="ethereal">Ethereal Dreams</option>
        </select>
    </div>
    
    <div style="margin-bottom: 20px;">
        <strong>Reality Templates:</strong><br>
        <button class="example-btn" onclick="loadCosmicStorms()">üåå Cosmic Storms</button>
        <button class="example-btn" onclick="loadQuantumEchoes()">üîÆ Quantum Echoes</button>
        <button class="example-btn" onclick="loadFloatingRealms()">üèùÔ∏è Floating Realms</button>
    </div>
    
    <button class="generate-btn" onclick="generateWorld()">‚ú® Weave This Reality</button>
    
    <div id="status" class="status"></div>
</div>

<!-- Hidden navigation links -->
<div style="display: none;">
    [[Go to Game->Game]]
    [[Go to Start->Start]]
</div>

<script>
function loadCosmicStorms() {
    document.getElementById('description').value = "Reality fractures during cosmic storms, where stellar winds carry fragments of possibility across the void. Travelers learn to navigate these tempests using resonance crystals that sing with the universe's heartbeat.";
    document.getElementById('theme').value = "cosmic reality storms";
    document.getElementById('tone').value = "wonder";
}

function loadQuantumEchoes() {
    document.getElementById('description').value = "Between moments, quantum echoes ripple through existence. Ancient beings have learned to read these temporal whispers, discovering that every choice creates infinite parallel threads in the cosmic weave.";
    document.getElementById('theme').value = "quantum temporal echoes";
    document.getElementById('tone').value = "mystery";
}

function loadFloatingRealms() {
    document.getElementById('description').value = "Massive realms drift through dimensional currents, each one a fragment of a greater cosmic pattern. Reality-shapers sail between them on vessels powered by crystallized starlight.";
    document.getElementById('theme').value = "floating dimensional realms";
    document.getElementById('tone').value = "adventure";
}

async function generateWorld() {
    const btn = document.querySelector('.generate-btn');
    const status = document.getElementById('status');
    
    const description = document.getElementById('description').value;
    const theme = document.getElementById('theme').value;
    const tone = document.getElementById('tone').value;
    
    if (!description || !theme) {
        alert('Please fill in the world description and theme!');
        return;
    }
    
    btn.disabled = true;
    btn.innerHTML = '<span class="spinner">üåÄ</span> Weaving Reality...';
    status.className = 'status loading';
    status.style.display = 'block';
    status.innerHTML = '<span class="spinner">üåÄ</span> Consulting the cosmic tapestry...<br><small>This may take a moment</small>';
    
    try {
        const response = await fetch('http://localhost:8000/author/generate-world', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                description: description,
                theme: theme,
                player_role: "adventurer",
                key_elements: [],
                tone: tone,
                storylet_count: 15
            })
        });
        
        const result = await response.json();
        
        if (response.ok) {
            status.className = 'status success';
            status.innerHTML = `
                üéâ Success! Wove ${result.storylets_created} reality threads!<br><br>
                <button onclick="document.querySelector('a[data-passage=Game]').click()" style="
                    background: linear-gradient(45deg, #2ecc71, #27ae60);
                    color: white;
                    border: none;
                    padding: 12px 24px;
                    font-size: 1.1em;
                    font-weight: bold;
                    border-radius: 10px;
                    cursor: pointer;
                    margin-top: 10px;
                ">üåü Enter Your Reality!</button>
            `;
        } else {
            throw new Error(result.detail || 'Generation failed');
        }
        
    } catch (error) {
        status.className = 'status error';
        status.innerHTML = `‚ùå Error: ${error.message}<br><small>Make sure your backend server is running!</small>`;
    } finally {
        btn.disabled = false;
        btn.innerHTML = '‚ú® Weave This Reality';
    }
}
</script>

:: Game {"position":"600,350","size":"100,100"}
<style>
body {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 20px;
    min-height: 100vh;
}

.game-container {
    max-width: 700px;
    margin: 0 auto;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-radius: 20px;
    padding: 30px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
}

.game-title {
    text-align: center;
    font-size: 2.5em;
    margin-bottom: 30px;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
}

#game-content {
    line-height: 1.6;
    font-size: 1.1em;
}

.choice-btn {
    display: block;
    width: 100%;
    margin: 10px 0;
    padding: 15px 20px;
    background: linear-gradient(45deg, #667eea, #764ba2);
    color: white;
    border: none;
    border-radius: 10px;
    font-size: 1.1em;
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: left;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
}

.choice-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
    background: linear-gradient(45deg, #5a67d8, #6b46c1);
}

.nav-links {
    text-align: center;
    margin-top: 30px;
    padding-top: 20px;
    border-top: 1px solid rgba(255, 255, 255, 0.2);
}

.nav-btn {
    display: inline-block;
    margin: 0 10px;
    padding: 10px 20px;
    background: rgba(255, 255, 255, 0.2);
    color: white;
    text-decoration: none;
    border-radius: 10px;
    font-weight: bold;
    transition: all 0.2s ease;
    cursor: pointer;
}

.nav-btn:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-1px);
}
</style>

<div class="game-container">
    <h1 class="game-title">üåå Your Reality</h1>
    
    <div id="game-content">
        <p style="text-align: center;"><span class="spinner">ÔøΩ</span> Weaving your reality threads...</p>
    </div>
    
    <div class="nav-links">
        <span class="nav-btn" onclick="document.querySelector('a[data-passage=WorldBuilder]').click()">‚ú® Weave New Reality</span>
        <span class="nav-btn" onclick="location.reload()">üîÑ Restart</span>
        <span class="nav-btn" onclick="document.querySelector('a[data-passage=Start]').click()">üè† Home</span>
    </div>
</div>

<script>
// This connects to your existing game logic
(function() {
    // Start a new game session
    const sessionId = 'twine-session-' + Math.random().toString(36).substr(2, 9);
    
    async function loadStorylet() {
        try {
            const response = await fetch('http://localhost:8000/api/next', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    session_id: sessionId,
                    vars: {
                        location: "start",
                        player_role: "adventurer"
                    }
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const story = await response.json();
            
            if (story.text) {
                let html = `<p>${story.text}</p>`;
                
                if (story.choices && story.choices.length > 0) {
                    html += '<div style="margin-top: 25px;">';
                    story.choices.forEach((choice, index) => {
                        html += `<button onclick="makeChoice(${index})" class="choice-btn">${choice.label}</button>`;
                    });
                    html += '</div>';
                }
                
                document.getElementById('game-content').innerHTML = html;
                
                // Store choices for later use
                window.currentChoices = story.choices;
                window.currentVars = story.vars;
            } else {
                document.getElementById('game-content').innerHTML = '<p>No reality threads found. Please weave a reality first!</p><br><span class="nav-btn" onclick="document.querySelector(\'a[data-passage=WorldBuilder]\').click()">Weave a Reality</span>';
            }
            
        } catch (error) {
            console.error('Game loading error:', error);
            document.getElementById('game-content').innerHTML = `<p>Error loading reality: ${error.message}</p><br><span class="nav-btn" onclick="document.querySelector('a[data-passage=WorldBuilder]').click()">Weave a Reality</span>`;
        }
    }
    
    window.makeChoice = async function(choiceIndex) {
        const choice = window.currentChoices[choiceIndex];
        const newVars = { ...window.currentVars, ...choice.set };
        
        // Show loading state
        document.getElementById('game-content').innerHTML = `
            <div style="text-align: center; padding: 40px 0;">
                <p><span class="spinner">üåÄ</span> Reality shifting...</p>
                <small style="opacity: 0.8;">Following the chosen thread</small>
            </div>
        `;
        
        try {
            const response = await fetch('http://localhost:8000/api/next', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    session_id: sessionId,
                    vars: newVars
                })
            });
            
            const story = await response.json();
            
            if (story.text) {
                let html = `<p>${story.text}</p>`;
                
                if (story.choices && story.choices.length > 0) {
                    html += '<div style="margin-top: 25px;">';
                    story.choices.forEach((choice, index) => {
                        html += `<button onclick="makeChoice(${index})" class="choice-btn">${choice.label}</button>`;
                    });
                    html += '</div>';
                }
                
                document.getElementById('game-content').innerHTML = html;
                window.currentChoices = story.choices;
                window.currentVars = story.vars;
            } else {
                document.getElementById('game-content').innerHTML = '<p>The reality weave continues...</p><br><span class="nav-btn" onclick="document.querySelector(\'a[data-passage=WorldBuilder]\').click()">Weave New Reality</span> | <span class="nav-btn" onclick="document.querySelector(\'a[data-passage=Game]\').click()">Restart</span>';
            }
            
        } catch (error) {
            console.error('Choice error:', error);
            document.getElementById('game-content').innerHTML = `<p>Error continuing reality: ${error.message}</p><br><span class="nav-btn" onclick="document.querySelector('a[data-passage=Game]').click()">Try Again</span>`;
        }
    };
    
    // Load the first storylet
    loadStorylet();
})();
</script>

<!-- Hidden navigation links -->
<div style="display: none;">
    [[Go to WorldBuilder->WorldBuilder]]
    [[Go to Start->Start]]
</div>

:: StoryScript [script]
// Global SugarCube functions available to all passages
window.goToPassage = function(passageName) {
    Engine.play(passageName);
};

window.restartStory = function() {
    Engine.restart();
};

// ========== WorldWeaver Enhanced Features ==========

// Progress Tracking System
window.WorldWeaver = {
    // Track player's journey through reality threads
    progressMap: {
        visited_storylets: [],
        decision_count: 0,
        session_start: Date.now(),
        current_session: null
    },
    
    // Reality Weaving Analytics
    analytics: {
        trackChoice: function(choiceLabel, storyletTitle) {
            WorldWeaver.progressMap.decision_count++;
            console.log(`üåü Choice made: "${choiceLabel}" in "${storyletTitle}"`);
            
            // Store in session storage for persistence
            if (typeof Storage !== "undefined") {
                let journeyLog = JSON.parse(localStorage.getItem('worldweaver_journey') || '[]');
                journeyLog.push({
                    timestamp: Date.now(),
                    storylet: storyletTitle,
                    choice: choiceLabel,
                    session: WorldWeaver.progressMap.current_session
                });
                
                // Keep only last 50 entries to avoid storage bloat
                if (journeyLog.length > 50) {
                    journeyLog = journeyLog.slice(-50);
                }
                
                localStorage.setItem('worldweaver_journey', JSON.stringify(journeyLog));
            }
        },
        
        getJourneyStats: function() {
            return {
                decisions_made: WorldWeaver.progressMap.decision_count,
                session_duration: Math.floor((Date.now() - WorldWeaver.progressMap.session_start) / 1000),
                storylets_visited: WorldWeaver.progressMap.visited_storylets.length
            };
        }
    },
    
    // Dynamic UI Enhancements
    ui: {
        // Add subtle particles effect to enhance cosmic feel
        addCosmicParticles: function() {
            if (document.getElementById('cosmic-particles')) return; // Already exists
            
            const particles = document.createElement('div');
            particles.id = 'cosmic-particles';
            particles.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                pointer-events: none;
                z-index: -1;
                background: radial-gradient(2px 2px at 20px 30px, #fff, transparent),
                           radial-gradient(2px 2px at 40px 70px, rgba(255,255,255,0.8), transparent),
                           radial-gradient(1px 1px at 90px 40px, #fff, transparent),
                           radial-gradient(1px 1px at 130px 80px, rgba(255,255,255,0.6), transparent);
                background-repeat: repeat;
                background-size: 200px 100px;
                animation: twinkle 3s linear infinite;
            `;
            document.body.appendChild(particles);
            
            // Add twinkle animation if not already defined
            if (!document.getElementById('cosmic-style')) {
                const style = document.createElement('style');
                style.id = 'cosmic-style';
                style.textContent = `
                    @keyframes twinkle {
                        0% { opacity: 0.3; }
                        50% { opacity: 0.8; }
                        100% { opacity: 0.3; }
                    }
                `;
                document.head.appendChild(style);
            }
        },
        
        // Show progress indicator
        showProgressIndicator: function() {
            const stats = WorldWeaver.analytics.getJourneyStats();
            const indicator = document.createElement('div');
            indicator.style.cssText = `
                position: fixed;
                top: 10px;
                right: 10px;
                background: rgba(0,0,0,0.7);
                color: white;
                padding: 8px 12px;
                border-radius: 20px;
                font-size: 0.8em;
                z-index: 1000;
                backdrop-filter: blur(5px);
                cursor: pointer;
            `;
            indicator.innerHTML = `üó∫Ô∏è ${stats.decisions_made} threads ‚Ä¢ ‚è±Ô∏è ${Math.floor(stats.session_duration/60)}m`;
            
            // Remove existing indicator
            const existing = document.getElementById('progress-indicator');
            if (existing) existing.remove();
            
            indicator.id = 'progress-indicator';
            indicator.onclick = () => WorldWeaver.map.showRealityMap();
            document.body.appendChild(indicator);
            
            // Auto-hide after 3 seconds unless hovered
            let hideTimeout = setTimeout(() => {
                if (indicator.parentNode && !indicator.matches(':hover')) {
                    indicator.style.transition = 'opacity 0.5s';
                    indicator.style.opacity = '0.6';
                }
            }, 3000);
            
            indicator.onmouseenter = () => {
                clearTimeout(hideTimeout);
                indicator.style.opacity = '1';
            };
        },
        
        // Create floating map toggle button
        createMapToggle: function() {
            if (document.getElementById('map-toggle')) return;
            
            const toggle = document.createElement('div');
            toggle.id = 'map-toggle';
            toggle.style.cssText = `
                position: fixed;
                bottom: 20px;
                right: 20px;
                width: 60px;
                height: 60px;
                background: linear-gradient(45deg, #667eea, #764ba2);
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                z-index: 1000;
                box-shadow: 0 4px 15px rgba(0,0,0,0.3);
                transition: all 0.3s ease;
                font-size: 1.5em;
            `;
            toggle.innerHTML = 'üó∫Ô∏è';
            toggle.onclick = () => WorldWeaver.map.toggleRealityMap();
            
            toggle.onmouseenter = () => {
                toggle.style.transform = 'scale(1.1)';
                toggle.style.boxShadow = '0 6px 20px rgba(0,0,0,0.4)';
            };
            
            toggle.onmouseleave = () => {
                toggle.style.transform = 'scale(1)';
                toggle.style.boxShadow = '0 4px 15px rgba(0,0,0,0.3)';
            };
            
            document.body.appendChild(toggle);
        }
    },
    
    // Reality Map System
    map: {
        isVisible: false,
        currentMap: null,
        
        // Generate visual reality map
        generateRealityMap: function() {
            const journey = JSON.parse(localStorage.getItem('worldweaver_journey') || '[]');
            const stats = WorldWeaver.analytics.getJourneyStats();
            
            if (journey.length === 0) {
                return `
                    <div style="text-align: center; padding: 40px; color: rgba(255,255,255,0.8);">
                        <div style="font-size: 3em; margin-bottom: 20px;">üåå</div>
                        <h3>Your Reality Threads Await</h3>
                        <p>Begin your journey to see the tapestry unfold...</p>
                    </div>
                `;
            }
            
            let mapHTML = `
                <div style="padding: 20px;">
                    <div style="text-align: center; margin-bottom: 30px;">
                        <h2 style="margin: 0; color: #feca57;">üó∫Ô∏è Reality Tapestry</h2>
                        <p style="margin: 5px 0; opacity: 0.8;">${stats.decisions_made} threads woven ‚Ä¢ ${stats.storylets_visited} realms explored</p>
                    </div>
                    
                    <div style="position: relative; min-height: 400px;">
            `;
            
            // Create visual thread connections
            journey.forEach((entry, index) => {
                const x = 50 + (index % 4) * 150;
                const y = 80 + Math.floor(index / 4) * 120;
                const isRecent = index >= journey.length - 3;
                
                // Thread node
                mapHTML += `
                    <div style="
                        position: absolute;
                        left: ${x}px;
                        top: ${y}px;
                        width: 80px;
                        height: 80px;
                        background: ${isRecent ? 'linear-gradient(45deg, #feca57, #ff6b6b)' : 'linear-gradient(45deg, #667eea, #764ba2)'};
                        border-radius: 50%;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        font-size: 1.2em;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        box-shadow: 0 4px 15px rgba(0,0,0,0.3);
                        border: ${isRecent ? '3px solid #fff' : '2px solid rgba(255,255,255,0.5)'};
                    " title="${entry.storylet}: ${entry.choice}" onclick="WorldWeaver.map.showThreadDetail(${index})">
                        ${WorldWeaver.map.getThreadIcon(entry.choice)}
                    </div>
                `;
                
                // Connection line to next thread
                if (index < journey.length - 1) {
                    const nextX = 50 + ((index + 1) % 4) * 150;
                    const nextY = 80 + Math.floor((index + 1) / 4) * 120;
                    
                    mapHTML += `
                        <svg style="position: absolute; left: 0; top: 0; width: 100%; height: 100%; pointer-events: none; z-index: -1;">
                            <line x1="${x + 40}" y1="${y + 40}" x2="${nextX + 40}" y2="${nextY + 40}" 
                                  stroke="rgba(255,255,255,0.3)" stroke-width="2" stroke-dasharray="5,5">
                                <animate attributeName="stroke-dashoffset" values="0;-10" dur="2s" repeatCount="indefinite"/>
                            </line>
                        </svg>
                    `;
                }
            });
            
            mapHTML += `
                    </div>
                    
                    <div style="text-align: center; margin-top: 30px; padding: 20px; background: rgba(0,0,0,0.3); border-radius: 10px;">
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; margin-bottom: 20px;">
                            <div><strong>üåü Recent Threads</strong><br><small>Last 3 choices</small></div>
                            <div><strong>‚ö° Path Density</strong><br><small>${Math.round(stats.decisions_made / Math.max(stats.session_duration / 60, 1))} choices/min</small></div>
                            <div><strong>üåå Reality Depth</strong><br><small>${stats.storylets_visited} unique locations</small></div>
                        </div>
                        <button onclick="WorldWeaver.map.exportJourney()" style="
                            background: linear-gradient(45deg, #2ecc71, #27ae60);
                            color: white;
                            border: none;
                            padding: 10px 20px;
                            border-radius: 20px;
                            cursor: pointer;
                            margin: 5px;
                        ">üìù Export Journey</button>
                        <button onclick="WorldWeaver.map.clearMap()" style="
                            background: linear-gradient(45deg, #e74c3c, #c0392b);
                            color: white;
                            border: none;
                            padding: 10px 20px;
                            border-radius: 20px;
                            cursor: pointer;
                            margin: 5px;
                        ">üóëÔ∏è Clear History</button>
                    </div>
                </div>
            `;
            
            return mapHTML;
        },
        
        // Get appropriate icon for thread choice
        getThreadIcon: function(choice) {
            const choice_lower = choice.toLowerCase();
            if (choice_lower.includes('explore') || choice_lower.includes('venture')) return 'üîç';
            if (choice_lower.includes('magic') || choice_lower.includes('spell')) return '‚ú®';
            if (choice_lower.includes('fight') || choice_lower.includes('attack')) return '‚öîÔ∏è';
            if (choice_lower.includes('help') || choice_lower.includes('assist')) return 'ü§ù';
            if (choice_lower.includes('run') || choice_lower.includes('flee')) return 'üí®';
            if (choice_lower.includes('talk') || choice_lower.includes('speak')) return 'üí¨';
            if (choice_lower.includes('learn') || choice_lower.includes('study')) return 'üìö';
            if (choice_lower.includes('craft') || choice_lower.includes('create')) return 'üî®';
            return 'üåü'; // Default icon
        },
        
        // Show/hide reality map
        toggleRealityMap: function() {
            if (WorldWeaver.map.isVisible) {
                WorldWeaver.map.hideRealityMap();
            } else {
                WorldWeaver.map.showRealityMap();
            }
        },
        
        showRealityMap: function() {
            if (WorldWeaver.map.currentMap) {
                WorldWeaver.map.currentMap.remove();
            }
            
            const mapOverlay = document.createElement('div');
            mapOverlay.id = 'reality-map-overlay';
            mapOverlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.9);
                z-index: 10000;
                backdrop-filter: blur(5px);
                overflow: auto;
            `;
            
            const mapContainer = document.createElement('div');
            mapContainer.style.cssText = `
                max-width: 800px;
                margin: 20px auto;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                border-radius: 20px;
                box-shadow: 0 8px 32px rgba(0,0,0,0.5);
                position: relative;
                color: white;
            `;
            
            // Close button
            const closeBtn = document.createElement('div');
            closeBtn.style.cssText = `
                position: absolute;
                top: 15px;
                right: 15px;
                width: 40px;
                height: 40px;
                background: rgba(255,255,255,0.2);
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                font-size: 1.5em;
                z-index: 10001;
            `;
            closeBtn.innerHTML = '‚úï';
            closeBtn.onclick = () => WorldWeaver.map.hideRealityMap();
            
            mapContainer.innerHTML = WorldWeaver.map.generateRealityMap();
            mapContainer.appendChild(closeBtn);
            mapOverlay.appendChild(mapContainer);
            
            // Close on overlay click
            mapOverlay.onclick = (e) => {
                if (e.target === mapOverlay) {
                    WorldWeaver.map.hideRealityMap();
                }
            };
            
            document.body.appendChild(mapOverlay);
            WorldWeaver.map.currentMap = mapOverlay;
            WorldWeaver.map.isVisible = true;
        },
        
        hideRealityMap: function() {
            if (WorldWeaver.map.currentMap) {
                WorldWeaver.map.currentMap.remove();
                WorldWeaver.map.currentMap = null;
            }
            WorldWeaver.map.isVisible = false;
        },
        
        // Show detail for specific thread
        showThreadDetail: function(index) {
            const journey = JSON.parse(localStorage.getItem('worldweaver_journey') || '[]');
            const entry = journey[index];
            if (!entry) return;
            
            alert(`üåü Reality Thread #${index + 1}\n\n` +
                  `üìç Location: ${entry.storylet}\n` +
                  `‚ö° Choice: ${entry.choice}\n` +
                  `‚è∞ Time: ${new Date(entry.timestamp).toLocaleString()}\n` +
                  `üé≠ Session: ${entry.session}`);
        },
        
        // Export journey as text
        exportJourney: function() {
            const journey = JSON.parse(localStorage.getItem('worldweaver_journey') || '[]');
            const stats = WorldWeaver.analytics.getJourneyStats();
            
            let exportText = `üåå WorldWeaver Journey Export\n`;
            exportText += `Generated: ${new Date().toLocaleString()}\n`;
            exportText += `Total Decisions: ${stats.decisions_made}\n`;
            exportText += `Session Duration: ${Math.floor(stats.session_duration/60)} minutes\n`;
            exportText += `Storylets Visited: ${stats.storylets_visited}\n\n`;
            exportText += `=== REALITY THREAD SEQUENCE ===\n\n`;
            
            journey.forEach((entry, index) => {
                exportText += `${index + 1}. ${entry.storylet}\n`;
                exportText += `   Choice: ${entry.choice}\n`;
                exportText += `   Time: ${new Date(entry.timestamp).toLocaleString()}\n\n`;
            });
            
            // Create download
            const blob = new Blob([exportText], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `worldweaver_journey_${Date.now()}.txt`;
            a.click();
            URL.revokeObjectURL(url);
        },
        
        // Clear journey history
        clearMap: function() {
            if (confirm('üóëÔ∏è Clear your entire reality thread history? This cannot be undone.')) {
                localStorage.removeItem('worldweaver_journey');
                WorldWeaver.debug.resetProgress();
                WorldWeaver.map.hideRealityMap();
                alert('‚úÖ Reality thread history cleared!');
            }
        }
    },
    
    // Debug and Development Tools
    debug: {
        // Show current game state (for development)
        showState: function() {
            console.log('üåå WorldWeaver Debug State:', {
                progress: WorldWeaver.progressMap,
                stats: WorldWeaver.analytics.getJourneyStats(),
                sugarcube_vars: typeof State !== 'undefined' ? State.variables : 'N/A'
            });
        },
        
        // Quick reset for testing
        resetProgress: function() {
            WorldWeaver.progressMap = {
                visited_storylets: [],
                decision_count: 0,
                session_start: Date.now(),
                current_session: 'session-' + Math.random().toString(36).substr(2, 9)
            };
            if (typeof Storage !== "undefined") {
                localStorage.removeItem('worldweaver_journey');
            }
            console.log('üîÑ Progress reset');
        }
    }
};

// Initialize WorldWeaver when story starts
$(document).on(':storyready', function() {
    WorldWeaver.progressMap.current_session = 'session-' + Math.random().toString(36).substr(2, 9);
    WorldWeaver.ui.addCosmicParticles();
    WorldWeaver.ui.createMapToggle();
    console.log('üåå WorldWeaver initialized with reality mapping');
});

// Track passage changes
$(document).on(':passagestart', function(ev) {
    const passageName = ev.passage.title;
    if (!WorldWeaver.progressMap.visited_storylets.includes(passageName)) {
        WorldWeaver.progressMap.visited_storylets.push(passageName);
    }
    
    // Show progress for Game passages
    if (passageName === 'Game') {
        setTimeout(() => WorldWeaver.ui.showProgressIndicator(), 1000);
    }
});

// Enhanced choice tracking for makeChoice function
const originalMakeChoice = window.makeChoice;
if (originalMakeChoice) {
    window.makeChoice = function(choiceIndex) {
        const choice = window.currentChoices && window.currentChoices[choiceIndex];
        if (choice) {
            WorldWeaver.analytics.trackChoice(choice.label, 'Current Storylet');
        }
        return originalMakeChoice.call(this, choiceIndex);
    };
}

:: Stylesheet [stylesheet]
.spinner {
    display: inline-block;
    animation: spin 2s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
